// jshint esnext: true
(function () {
	'use strict';

	exports = module.exports = function (options) {

		// keys

		const keys = {
			mailKey: 'üìØ –ü–æ—á—Ç–∞',
			domainsKey: 'üóÇ –î–æ–º–µ–Ω—ã',
			settingsKey: '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
			mailBoxesKey: 'üì´ –Ø—â–∏–∫–∏',
			mailConfKey: 'üóû –†–∞—Å—Å—ã–ª–∫–∏',
			backKey: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è',
			changePasswordKey: 'üéÅ –ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å',
			addKey: '‚ûï –î–æ–±–∞–≤–∏—Ç—å',
			subtractKey: '‚ûñ –£–±—Ä–∞—Ç—å',
			listKey: 'üìÉ –°–ø–∏—Å–æ–∫',
			removeKey: 'üóë –£–¥–∞–ª–∏—Ç—å',
			checkKey: 'üî¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
			domainPrefix: 'üåç ',
			maillistPrefix: 'üìÆ ',
			subscriberPrefix: 'üê± '
		};
		const pdd = options.pdd;

		function promiseStringFn(str) {
			return function () {
				return new Promise(function (resolve, reject) {
					resolve(str);
				});
			};
		}

		// keyboards

		let layouts = {
			root: {
				reply_markup: {
					keyboard: [
						[keys.mailKey, keys.domainsKey, keys.settingsKey]
					],
					resize_keyboard: true
				},
				query: promiseStringFn('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?'),
				tree: {}
			}
		};
		let justBackMarckup = {
			keyboard: [
				[keys.backKey]
			],
			resize_keyboard: true
		};
		layouts.root.tree[keys.mailKey] = { // –ü–æ—á—Ç–∞
			reply_markup: {
				keyboard: [
					[keys.mailBoxesKey, keys.mailConfKey, keys.backKey]
				],
				resize_keyboard: true
			},
			query: promiseStringFn('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ—á—Ç–æ–π?'),
			tree: {}
		};
		layouts.root.tree[keys.mailKey].tree[keys.mailBoxesKey] = { // –ü–æ—á—Ç–∞ -> –Ø—â–∏–∫–∏
			reply_markup: {
				keyboard: [
					[keys.addKey, keys.backKey]
				],
				resize_keyboard: true
			},
			query: pdd.listMailboxes,
			tree: {},
			mailboxLayout: function (msg, ro) {
				let markup = ro ? justBackMarckup : {
						keyboard: [
							[keys.changePasswordKey],
							[keys.removeKey, keys.backKey]
						],
						resize_keyboard: true
					};
				return {
					reply_markup: markup,
					query: promiseStringFn(msg),
					tree: {}
				};
			},
			baseTree: function () {
				let obj = {};
				obj[keys.addKey] = {
					reply_markup: justBackMarckup,
					query: promiseStringFn('–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å –Ω–æ–≤—ã–π —è—â–∏–∫?')
				};
				return obj;
			}
		};
		layouts.root.tree[keys.mailKey].tree[keys.mailConfKey] = { // –ü–æ—á—Ç–∞ -> –†–∞—Å—Å—ã–ª–∫–∏
			reply_markup: {
				keyboard: [
					[keys.addKey, keys.backKey]
				],
				resize_keyboard: true
			},
			query: pdd.listMaillists,
			tree: {},
			maillistLayout: function (name, uid) {
				let markup = {
						keyboard : [
							[keys.addKey, keys.subtractKey, keys.backKey]
						],
						resize_keyboard: true
				};
				return {
					reply_markup: markup,
					query: pdd.getMaillistInfo(name, uid),
					tree: {},
					subscriberPrefix: keys.subscriberPrefix
				};
			},
			baseTree: function () {
				let obj = {};
				obj[keys.addKey] = {
					reply_markup: justBackMarckup,
					query: promiseStringFn('–ö–∞–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–æ–±–∞–≤–∏—Ç—å?')
				};
				return obj;
			},
			baseKeyboard:  function () {
				return [
							[keys.addKey, keys.backKey]
						];
			},
			maillistPrefix: keys.maillistPrefix
		};
		layouts.root.tree[keys.mailKey].tree[keys.mailConfKey].tree[keys.addKey] = {
			reply_markup: justBackMarckup,
			query: promiseStringFn('–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É?')
		};

		layouts.root.tree[keys.domainsKey] = {
			reply_markup: {
				keyboard: [
					[keys.addKey, keys.backKey]
				],
				resize_keyboard: true
			},
			query: pdd.listDomains,
			tree: {},
			domainLayout: function (msg) {
				let markup = {
						keyboard: [
							[keys.checkKey, keys.backKey]
						],
						resize_keyboard: true
					};
				return {
					reply_markup: markup,
					query: promiseStringFn(msg),
					tree: {}
				};
			},
			baseTree: function () {
				let obj = {};
				obj[keys.addKey] = {
					reply_markup: justBackMarckup,
					query: promiseStringFn('–ö–∞–∫–æ–π –¥–æ–º–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å?')
				};
				return obj;
			},
			baseKeyboard: function () {
				return [
							[keys.addKey, keys.backKey]
						];
			},
			domainPrefix: keys.domainPrefix
		};

		return {
			keys: keys,
			layouts: layouts,
			justBackMarckup: justBackMarckup,
			parseTree: function (treeArr, msgTxt) {
				let resArr = [];
				let lo = treeArr.reduce(function (prev, curr) {
					if (typeof prev === 'undefined') {
						resArr = [];
						return undefined;
					} else {
						resArr.push(curr);
						return prev.tree[curr];
					}
				}, layouts.root);
				if (typeof lo === 'undefined') {
					lo = layouts.root;
				}
				if (typeof lo.tree === 'undefined' || typeof lo.tree[msgTxt] === 'undefined') {
					return {
						branch: resArr,
						layout: lo,
						action: msgTxt
					};
				} else {
					return {
						branch: resArr.concat(msgTxt),
						layout: lo.tree[msgTxt]
					};
				}
			}
		};
	};
})();